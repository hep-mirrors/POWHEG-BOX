-------------------------------------------------------------------------------
-- Short guide to produce a virtual amplitude for the POWHEG BOX using GoSam --
-------------------------------------------------------------------------------


1) In a new directory copy or generate the code needed by the POWHEG BOX.
   This should include everything but the virtual part.
   
   *************************************************************************
   --> IF THE FILES 'virtual.f' AND 'PhysPars.h' ARE PRESENT AND YOU WANT TO 
       KEEP THEM, PLEASE RENAME THEM TO SOMETHING ELSE.
   *************************************************************************

2) Copy the files contained in the directory 'GoSamStuff' to the new
   directory as well.

3) Two files need now to be modified:
   - the Makefile needs to be modified according to the example
     'Makefile.Example' contained in the 'GoSamStuff' directory. All the
     needed modifications are highlighted with a box and a text 
     "!!! GOSAM !!!".

   - in the file 'init_processes.f', in the subroutine 'init_processes', a
     call to the subroutine 'gosam_flst_born' needs to be added. The arguments
     of the function are the powers of the strong coupling Alphas and the
     power of the EW-coupling Alpha at the Born level:

     	   call gosam_flst_born(AlphasPower, AlphaPower)

     For e.g. W+1jet or Z+1jet this corresponds to the following call:

           call gosam_flst_born(1,2)

4) The last step is to prepare input cards for the POWHEG BOX and GoSam by
   editing respectively the files
   'GoSam_POWHEG/gosam.rc'
   'GoSam_POWHEG/powheg.input'.
   
   A template file for the 'gosam.rc' input file can be found in the
   'GoSam_POWHEG' directory. Its name is 'gosam.rc.template'.
   The template is partly self-explaining and for further details
   about the possible options we refer to the GoSam online-documentation,
   which can be found on the webpage 'http://gosam.hepforge.org/doc/'.

   A template file for the 'powheg.input' input file can be found in the
   'GoSam_POWHEG' directory. Its name is 'powheg.input.template'.

5) Everything is now ready to generate the code. The script 'buildvirt'
   should help doing this.
   Just type './buildvirt help' to see all possible options. The 
   normal sequence of commands would be:

   ./buildvirt libgolem  - this creates a dummy 'libgolem_olp.so' library in
   	      	       	   the directory 'GoSam_POWHEG'. This dummy library 
			   is needed to run the POWHEG BOX for the first time 
			   and create the order file 'orderfile.lh'. 

   ./buildvirt orderfile - this creates the orderfile 'orderfile.lh'
   	      		   in the directory 'GoSam_POWHEG'.

   ./buildvirt genvirt   - creates the virtual code without 
   	      		   generating the amplitudes and without compiling.
			   The virtual code is generated in the directory
			   'GoSam_POWHEG/Virtual'.
			   This command is needed if you just wish to check
			   that GoSam is indeed generating what you want.

   ./buildvirt virtual   - generates and compiles the full virtual code.

   ./buildvirt newfiles  - generates and modifies some existing files to
   	      		   run the POWHEG BOX with the newly created 
			   virtual amplitude. These files are:

	   ->'virtual.f':  old file renamed to 'virtual.f.dummy'.
			   The new file contains now the call to the virtual
			   amplitude generated by GoSam.
				
	   ->'init_couplings.f': old file renamed to 'init_couplings.f.old'.
	   		   The new file contains the call to initialize the
			   code of the virtual amplitude, and the calls to
			   pass information about model parameters from the
			   POWHEG BOX to the code generated by GoSam.

	   ->'init_processes.f': old file renamed to 'init_processes.f.old'.
	   		   The call to the subroutine 'gosam_flst_born', 
			   needed to generate the order file is commented.
			   

  Further to these commands the script accepts also:

   ./buildvirt all	- runs all the previous commands in one go
   	      		  (to be used only when everything is 100%
			  checked and one just wants to regenerate
			  everything from scratch).

   ./buildvirt cleanvirt - deletes the generated virtual code keeping the 
   	      		   order file 'orderfile.lh'.

   ./buildvirt cleannewfiles - undo the creation of the new files restoring
   	      		       the old files.

   ./buildvirt veryclean - restores the initial situation removing all 
   	      		   created files.

   ./buildvirt help      - shows a short description of the commands.


---------------
 SPECIAL NEEDS
---------------
   
   -> Sometimes you may need to recompile the full code with a different compiler
      from the one used to generate it. In the example Makefile 'Makefile.Example'
      there are two commands which can be added to your Makefile, which should 
      allow for a recompilation with a new compiler. If you add these lines to 
      your Makefile you can stear the virtual code with
      
      make configurevirt	(making sure that the compiler passed to the 
      	   			 configuration script is the one you need),
      
      make makevirtual

      make cleanvirtual

      uninstallvirtual


      These commands allows to reconfigure and install/clean/uninstall the 
      virtual code.

      The virtual code is generated using autotools. This allows to use the 
      following commands:
      
      ./configure --options    - configures the code. The complete list of option
      		  	       	 is shown using './configure --help'. An important 
				 option is the location where the code should be 
				 installed. To give the correct path use
				 './configure --prefix=/your/installation/path'.
   
      make		       - compiles the code
      
      make install	       - installs the code in '/your/installation/path'.
      	   		       	 In the directory '/your/installation/path' two new
				 direcroties 'lib' and 'include' will be created,
				 containing the libraries and modules respectively.

      make clean	       - removes the object files created in the compilation

      make uninstall	       - removes the binaries (libraries and modules)
      	   		       	 in '/your/installation/path'.